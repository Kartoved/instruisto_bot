import json
from os import makedirs, rename, path
from shutil import copy
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from lexicon.lexicon import HELP_COMMAND
from keyboards.keyboards import keyboard_contact, keybord_start
from services.services import *
from lexicon.callbacks import *

router: Router = Router()


@router.message(Command(commands=['start']))
async def process_start_command(message: Message):
    '''–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤'''
    if not path.exists(f'users_data/{str(message.chat.id)}'):
        makedirs(f'users_data/{str(message.chat.id)}', exist_ok=True)
        copy('dictionary.json', f'users_data/{str(message.chat.id)}')
        rename(f'users_data/{str(message.chat.id)}/dictionary.json',
               f'users_data/{str(message.chat.id)}/unexplored_words.json')
        with open(f'users_data/{str(message.chat.id)}/explored_words.json',
                  mode='w',
                  encoding='utf-8') as f:
            json.dump([], f)
    else:
        await process_help_command(message)


@router.message(Command(commands=['help']))
async def process_help_command(message: Message):
    '''–≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–ø—Ä–∞–≤–∫–∏'''
    await message.answer(text=HELP_COMMAND,
                         reply_markup=keybord_start)


@router.message(Command(commands=['contact']))
async def contact_with_developer(message: Message):
    '''–≤—ã–≤–æ–¥–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'''
    await message.answer(text='–ü–∏—à–∏ –º–Ω–µ –ø—Ä–æ –±–∞–≥–∏ –∏ —Å–ª–æ–≤–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ ü•≥',
                         reply_markup=keyboard_contact)


@router.message(Command(commands='learning'))
async def start_learning(message: Message):
    '''–Ω–∞—á–∞—Ç—å —É—á–∏—Ç—å –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞'''
    chat_id = message.chat.id
    explored_words = import_words(chat_id, 'explored_words')
    unexplored_words = import_words(chat_id, 'unexplored_words')
    new_word = await get_unexplored_word(chat_id, unexplored_words)
    if new_word:
        new_word = check_and_change_coefficient(
            new_word, new_word['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'])
        export_words(chat_id, unexplored_words, 'unexplored_words')
        if new_word not in explored_words:
            explored_words.append(new_word)
            export_words(chat_id, explored_words, 'explored_words')


@router.message(Command(commands='repeating'))
async def start_repeating(message: Message):
    '''–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤'''
    chat_id = message.chat.id
    explored_words = import_words(chat_id, 'explored_words')
    await send_explored_word(chat_id, explored_words)
