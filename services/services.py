"""–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""

import json
from os import makedirs, rename, path
from shutil import copy
from datetime import datetime, timedelta
from config_data.config import bot
from keyboards.keyboards import keyboard_add_word, keyboard_check_word, keyboard_open_profile
from lexicon.lexicon import format_learning_message, format_repeating_message


async def get_unexplored_word(chat_id: int, unexplored_words: list) -> dict:
    """–≤—ã–¥–∞—ë—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã—Ö"""
    if unexplored_words:
        new_word: dict = unexplored_words.pop(0)
        await bot.send_message(text=format_learning_message(new_word),
                               chat_id=chat_id,
                               reply_markup=keyboard_add_word)
    else:
        new_word: dict = {}
        await bot.send_message(text="–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã. –ù–æ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç.",
                               chat_id=chat_id)
    return new_word


def change_date(value: int) -> str:
    """–º–µ–Ω—è–µ—Ç –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    date: datetime = datetime.now()
    date = date + timedelta(days=value)
    return date.strftime("%d-%m-%Y")


def check_and_change_coefficient(word: dict,
                                 interval: int,
                                 remember: bool = False) -> dict:
    """–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –∏–∑–º–µ–Ω—è–µ—Ç –µ–≥–æ"""
    if remember and interval < 6:
        interval += 1
    elif not remember and interval > 0:
        interval -= 1
    word["–∏–Ω—Ç–µ—Ä–≤–∞–ª"]: int = interval
    interval_to_days = [1, 2, 7, 14, 28, 84, 168]
    word["–¥–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"] = str(change_date(interval_to_days[interval]))
    return word


async def send_explored_word(chat_id: int, explored_words: list) -> dict:
    """–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"""
    for word in explored_words:
        if datetime.strptime(word["–¥–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"], "%d-%m-%Y") <= datetime.now():
            return await bot.send_message(text=format_repeating_message(word),
                                          chat_id=chat_id,
                                          reply_markup=keyboard_check_word)
    date_of_closest_repetition = get_date_of_closest_repetition(explored_words)
    return await bot.send_message(text=f'üìÜ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç.\n\n\
–ë–ª–∏–∂–∞–π—à–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ –±—É–¥–µ—Ç <strong> {date_of_closest_repetition}</strong>',
                                  chat_id=chat_id,
                                  reply_markup=keyboard_open_profile)


def get_date_of_closest_repetition(explored_words: list) -> str:
    """–ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    date_of_closest_repetition = datetime.strptime(
        explored_words[0]["–¥–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"], "%d-%m-%Y")
    for word in explored_words:
        if datetime.strptime(word["–¥–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"], "%d-%m-%Y") < date_of_closest_repetition:
            date_of_closest_repetition = datetime.strptime(
                word["–¥–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"], "%d-%m-%Y")
    return date_of_closest_repetition.strftime("%d-%m-%Y")


def get_explored_word(explored_words: list) -> dict:
    """–ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–µ–Ω–Ω—ã—Ö"""
    for word in explored_words:
        if datetime.strptime(word["–¥–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"], "%d-%m-%Y") <= datetime.now():
            return word


def import_words(chat_id: str, list_name: str) -> list:
    """–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    with open(f"users_data/{chat_id}/{list_name}.json", encoding="utf-8") as f:
        list_of_words: list = json.load(f)
    return list_of_words


def export_words(chat_id: str, list_of_words: list, list_name: str):
    """—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"""
    with open(
        f"users_data/{chat_id}/{list_name}.json", encoding="utf-8", mode="w"
    ) as f:
        json.dump(list_of_words, f, ensure_ascii=False)


def create_admin_files():
    """—Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    makedirs("users_data", exist_ok=True)
    makedirs("reports", exist_ok=True)
    with open("reports/reports_statements.json", "w") as reports:
        json.dump({}, reports)


def create_user_folders(chat_id: int):
    """—Å–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not path.exists(f"users_data/{chat_id}"):
        makedirs(f"users_data/{chat_id}", exist_ok=True)
        copy("services/dictionary.json", f"users_data/{chat_id}")
        rename(f"users_data/{chat_id}/dictionary.json",
               f"users_data/{chat_id}/unexplored_words.json")
        with open(f"users_data/{chat_id}/explored_words.json",
                  mode="w",
                  encoding="utf-8") as f:
            json.dump([], f)


def add_user_to_list(chat_id):
    """–¥–æ–±–∞–≤–ª—è–µ—Ç —é–∑–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤"""
    try:
        with open("users_data/user_list.json") as f:
            user_list: list = json.load(f)
            if chat_id not in user_list:
                user_list.append(chat_id)
                with open("users_data/user_list.json", "w") as f:
                    json.dump(user_list, f)
    except FileNotFoundError:
        with open("users_data/user_list.json", "w") as f:
            user_list: list = [chat_id]
            json.dump(user_list, f)


def export_report(chat_id: int, report: str, username: str):
    """—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–≥—Ä–µ–ø–æ—Ä—Ç –≤ —Ñ–∞–∏ÃÜ–ª"""
    date = datetime.now().strftime("%d-%m-%Y-%H-%M-%S")
    with open(f"reports/{date}.txt", "w", encoding="utf-8") as f:
        f.write(f'from user: {username}\n\n"{report}"')


def send_reminder(chat_id):
    """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ —Å–ª–æ–≤ –≤ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å"""
    list_of_words = import_words(chat_id, "explored_words")
    text = f'–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! –î–∞–≤–∞–π –∑–∞–Ω–∏–º–∞—Ç—å—Å—è!'
    for word in list_of_words:
        if datetime.strptime(word["–¥–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"], "%d-%m-%Y") <= datetime.now().strftime("%d-%m-%Y"):
            return text


async def check_users_which_should_be_notified(user_list):
    """–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —é–∑–µ—Ä–æ–≤, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    if datetime.now().strftime("%H:%M") == datetime.strptime("17:01", "%H:%M"):
        print('fuck yeah')
        for user in user_list:
            if send_reminder(user):
                await bot.send_message(chat_id=user, text=send_reminder(user))
